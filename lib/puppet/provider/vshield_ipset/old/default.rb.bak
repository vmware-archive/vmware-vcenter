require 'puppet/provider/vshield'

Puppet::Type.type(:vshield_edge_firewall).provide(:vshield_edge_firewall, :parent => Puppet::Provider::Vshield) do
  @doc = 'Manages vShield edge firewall rules'

  #{ :enable_aesni => 'aesni?enable=',
  #  :enable_fips  => 'fips?enable=',
  #  :enable_tcp_loose => 'tcploose?enable=',
  #  :vse_log_level => 'logging?level='
  #}.each do |property, request|
  #  camel_prop = PuppetX::VMware::Util.camelize(property, :lower).to_sym
  #  request ||= property.to_s.sub(/^enable_/,'').sub(/_/, '') + '?enable='
#
#    define_method(property) do
#      value = edge_detail[camel_prop.to_s]
#      if (value.is_a? TrueClass) || (value.is_a? FalseClass)
#        value ? :true : :false
#      else
#        value
#      end
#    end

#    define_method("#{property}=".to_sym) do |value|
#      post("api/3.0/edges/#{@instance['id']}/#{request}#{value}", {})
#    end
#  end
#
  def ipsets
    get("/api/2.0/services/ipset/#{@instance['id']}")
  end

  def ipsets=(value)
    def return_pg_id(port_group)
      dc = vim.serviceInstance.find_datacenter()
      dc.network.each do |pg|
        if pg.name == port_group
          return pg._ref
        end
      end
      # if it gets here, raise an error
      raise Puppet::Error, "Fatal Error: Portgroup: '#{port_group}' was not found"
    end
    post("/api/2.0/services/ipset/#{@instance['id']}", {:ipset => value})
  end

  def firewall
    get("api/3.0/edges/#{@instance['id']}/firewall/config")['firewall'])
  end

  def firewall=(value)
    put("api/3.0/edges/#{@instance['id']}/firewall/config", {:firewall => value})
  end

  def exists?
    result = edge_summary || []
    begin
      @instance = result.find{|x| x['name'] == resource[:edge_name]}
    rescue Exception
    end
  end

  private

  def datacenter(name=resource[:datacenter_name])
    vim.serviceInstance.find_datacenter name or raise Puppet::Error, "datacenter '#{name}' not found."
  end

  def compute(name=resource[:compute])
    datacenter.find_compute_resource name or raise Puppet::Error, "compute resource '#{name}' not found."
  end

  def datastore
    if resource[:datastore]
      datacenter.find_datastore resource[:datastore]
    else
      compute.datastore.first
    end
  end

  def edge_summary
    # TODO: This may exceed 256 pagesize limit.
    @edge_summary ||= [get('api/3.0/edges')['pagedEdgeList']['edgePage']['edgeSummary']].flatten
  end

  def edge_detail
    raise Puppet::Error, "edge not available" unless @instance
    Puppet.debug "@instance = #{@instance}"
    @edge_detail ||= get("api/3.0/edges/#{@instance['id']}")['edge']
  end
end

